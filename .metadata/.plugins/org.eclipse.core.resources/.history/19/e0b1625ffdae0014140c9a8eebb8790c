package se.kth.ict.id2203.components.epfd;

import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import se.kth.ict.id2203.ports.epfd.EventuallyPerfectFailureDetector;
import se.kth.ict.id2203.ports.epfd.Restore;
import se.kth.ict.id2203.ports.epfd.Suspect;
import se.kth.ict.id2203.ports.pp2p.PerfectPointToPointLink;
import se.sics.kompics.ComponentDefinition;
import se.sics.kompics.Handler;
import se.sics.kompics.Negative;
import se.sics.kompics.Positive;
import se.sics.kompics.address.Address;
import se.sics.kompics.launch.NoLinkException;
import se.sics.kompics.launch.Topology;
import se.sics.kompics.timer.ScheduleTimeout;
import se.sics.kompics.timer.Timer;

public class Epfd extends ComponentDefinition {

	private static final Logger logger = LoggerFactory.getLogger(Epfd.class);
	private Positive<Timer> timer = requires(Timer.class);
	private Positive<PerfectPointToPointLink> pp2p = requires(PerfectPointToPointLink.class);
	private Negative<EventuallyPerfectFailureDetector> epfd = provides(EventuallyPerfectFailureDetector.class);
	
	private long delay;
	private long delta;
	private Address self;
	private Set<Address> topology;

	
	public Epfd(EpfdInit init) {
	//	subscribe(handlePp2pSend, timer);
	//	subscribe(handleMessage, pp2p);
		subscribe(handleRestore, epfd);
		subscribe(handleSuspect, epfd);
		delay = init.getInitialDelay();
		delta = init.getDeltaDelay();
		
		topology = init.getAllAddresses();
		self = topology.getSelfAddress();

		
		
	}
	
	private Handler<Restore> handleRestore = new Handler<Restore>() {
		@Override
		public void handle(Restore arg0) {
			// TODO Auto-generated method stub
			
		}
	};

	private Handler<Suspect> handleSuspect = new Handler<Suspect>() {

		@Override
		public void handle(Suspect arg0) {
			// TODO Auto-generated method stub
			
		}
	
	};

}